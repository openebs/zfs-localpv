/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openebs/zfs-localpv/pkg/apis/openebs.io/zfs/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZFSRestoreLister helps list ZFSRestores.
// All objects returned here must be treated as read-only.
type ZFSRestoreLister interface {
	// List lists all ZFSRestores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ZFSRestore, err error)
	// ZFSRestores returns an object that can list and get ZFSRestores.
	ZFSRestores(namespace string) ZFSRestoreNamespaceLister
	ZFSRestoreListerExpansion
}

// zFSRestoreLister implements the ZFSRestoreLister interface.
type zFSRestoreLister struct {
	indexer cache.Indexer
}

// NewZFSRestoreLister returns a new ZFSRestoreLister.
func NewZFSRestoreLister(indexer cache.Indexer) ZFSRestoreLister {
	return &zFSRestoreLister{indexer: indexer}
}

// List lists all ZFSRestores in the indexer.
func (s *zFSRestoreLister) List(selector labels.Selector) (ret []*v1.ZFSRestore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSRestore))
	})
	return ret, err
}

// ZFSRestores returns an object that can list and get ZFSRestores.
func (s *zFSRestoreLister) ZFSRestores(namespace string) ZFSRestoreNamespaceLister {
	return zFSRestoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZFSRestoreNamespaceLister helps list and get ZFSRestores.
// All objects returned here must be treated as read-only.
type ZFSRestoreNamespaceLister interface {
	// List lists all ZFSRestores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ZFSRestore, err error)
	// Get retrieves the ZFSRestore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ZFSRestore, error)
	ZFSRestoreNamespaceListerExpansion
}

// zFSRestoreNamespaceLister implements the ZFSRestoreNamespaceLister
// interface.
type zFSRestoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZFSRestores in the indexer for a given namespace.
func (s zFSRestoreNamespaceLister) List(selector labels.Selector) (ret []*v1.ZFSRestore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSRestore))
	})
	return ret, err
}

// Get retrieves the ZFSRestore from the indexer for a given namespace and name.
func (s zFSRestoreNamespaceLister) Get(name string) (*v1.ZFSRestore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("zfsrestore"), name)
	}
	return obj.(*v1.ZFSRestore), nil
}
