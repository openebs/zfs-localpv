/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openebs/zfs-localpv/pkg/apis/openebs.io/zfs/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZFSVolumeLister helps list ZFSVolumes.
type ZFSVolumeLister interface {
	// List lists all ZFSVolumes in the indexer.
	List(selector labels.Selector) (ret []*v1.ZFSVolume, err error)
	// ZFSVolumes returns an object that can list and get ZFSVolumes.
	ZFSVolumes(namespace string) ZFSVolumeNamespaceLister
	ZFSVolumeListerExpansion
}

// zFSVolumeLister implements the ZFSVolumeLister interface.
type zFSVolumeLister struct {
	indexer cache.Indexer
}

// NewZFSVolumeLister returns a new ZFSVolumeLister.
func NewZFSVolumeLister(indexer cache.Indexer) ZFSVolumeLister {
	return &zFSVolumeLister{indexer: indexer}
}

// List lists all ZFSVolumes in the indexer.
func (s *zFSVolumeLister) List(selector labels.Selector) (ret []*v1.ZFSVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSVolume))
	})
	return ret, err
}

// ZFSVolumes returns an object that can list and get ZFSVolumes.
func (s *zFSVolumeLister) ZFSVolumes(namespace string) ZFSVolumeNamespaceLister {
	return zFSVolumeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZFSVolumeNamespaceLister helps list and get ZFSVolumes.
type ZFSVolumeNamespaceLister interface {
	// List lists all ZFSVolumes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ZFSVolume, err error)
	// Get retrieves the ZFSVolume from the indexer for a given namespace and name.
	Get(name string) (*v1.ZFSVolume, error)
	ZFSVolumeNamespaceListerExpansion
}

// zFSVolumeNamespaceLister implements the ZFSVolumeNamespaceLister
// interface.
type zFSVolumeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZFSVolumes in the indexer for a given namespace.
func (s zFSVolumeNamespaceLister) List(selector labels.Selector) (ret []*v1.ZFSVolume, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSVolume))
	})
	return ret, err
}

// Get retrieves the ZFSVolume from the indexer for a given namespace and name.
func (s zFSVolumeNamespaceLister) Get(name string) (*v1.ZFSVolume, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("zfsvolume"), name)
	}
	return obj.(*v1.ZFSVolume), nil
}
