/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openebs/zfs-localpv/pkg/apis/openebs.io/zfs/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZFSBackupLister helps list ZFSBackups.
type ZFSBackupLister interface {
	// List lists all ZFSBackups in the indexer.
	List(selector labels.Selector) (ret []*v1.ZFSBackup, err error)
	// ZFSBackups returns an object that can list and get ZFSBackups.
	ZFSBackups(namespace string) ZFSBackupNamespaceLister
	ZFSBackupListerExpansion
}

// zFSBackupLister implements the ZFSBackupLister interface.
type zFSBackupLister struct {
	indexer cache.Indexer
}

// NewZFSBackupLister returns a new ZFSBackupLister.
func NewZFSBackupLister(indexer cache.Indexer) ZFSBackupLister {
	return &zFSBackupLister{indexer: indexer}
}

// List lists all ZFSBackups in the indexer.
func (s *zFSBackupLister) List(selector labels.Selector) (ret []*v1.ZFSBackup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSBackup))
	})
	return ret, err
}

// ZFSBackups returns an object that can list and get ZFSBackups.
func (s *zFSBackupLister) ZFSBackups(namespace string) ZFSBackupNamespaceLister {
	return zFSBackupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZFSBackupNamespaceLister helps list and get ZFSBackups.
type ZFSBackupNamespaceLister interface {
	// List lists all ZFSBackups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ZFSBackup, err error)
	// Get retrieves the ZFSBackup from the indexer for a given namespace and name.
	Get(name string) (*v1.ZFSBackup, error)
	ZFSBackupNamespaceListerExpansion
}

// zFSBackupNamespaceLister implements the ZFSBackupNamespaceLister
// interface.
type zFSBackupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZFSBackups in the indexer for a given namespace.
func (s zFSBackupNamespaceLister) List(selector labels.Selector) (ret []*v1.ZFSBackup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSBackup))
	})
	return ret, err
}

// Get retrieves the ZFSBackup from the indexer for a given namespace and name.
func (s zFSBackupNamespaceLister) Get(name string) (*v1.ZFSBackup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("zfsbackup"), name)
	}
	return obj.(*v1.ZFSBackup), nil
}
