/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openebs/zfs-localpv/pkg/apis/openebs.io/zfs/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZFSNodeLister helps list ZFSNodes.
// All objects returned here must be treated as read-only.
type ZFSNodeLister interface {
	// List lists all ZFSNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ZFSNode, err error)
	// ZFSNodes returns an object that can list and get ZFSNodes.
	ZFSNodes(namespace string) ZFSNodeNamespaceLister
	ZFSNodeListerExpansion
}

// zFSNodeLister implements the ZFSNodeLister interface.
type zFSNodeLister struct {
	indexer cache.Indexer
}

// NewZFSNodeLister returns a new ZFSNodeLister.
func NewZFSNodeLister(indexer cache.Indexer) ZFSNodeLister {
	return &zFSNodeLister{indexer: indexer}
}

// List lists all ZFSNodes in the indexer.
func (s *zFSNodeLister) List(selector labels.Selector) (ret []*v1.ZFSNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSNode))
	})
	return ret, err
}

// ZFSNodes returns an object that can list and get ZFSNodes.
func (s *zFSNodeLister) ZFSNodes(namespace string) ZFSNodeNamespaceLister {
	return zFSNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZFSNodeNamespaceLister helps list and get ZFSNodes.
// All objects returned here must be treated as read-only.
type ZFSNodeNamespaceLister interface {
	// List lists all ZFSNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ZFSNode, err error)
	// Get retrieves the ZFSNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ZFSNode, error)
	ZFSNodeNamespaceListerExpansion
}

// zFSNodeNamespaceLister implements the ZFSNodeNamespaceLister
// interface.
type zFSNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZFSNodes in the indexer for a given namespace.
func (s zFSNodeNamespaceLister) List(selector labels.Selector) (ret []*v1.ZFSNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ZFSNode))
	})
	return ret, err
}

// Get retrieves the ZFSNode from the indexer for a given namespace and name.
func (s zFSNodeNamespaceLister) Get(name string) (*v1.ZFSNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("zfsnode"), name)
	}
	return obj.(*v1.ZFSNode), nil
}
